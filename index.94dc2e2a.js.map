{"mappings":"AAIA,SAASA,EAAYC,GACU,UAAzBA,EAAMC,OAAOC,UAIjBF,EAAMG,cAAcC,UAAUC,OAAO,cATlBC,SAASC,iBAAiB,wBAElCC,SAAQC,GAAMA,EAAGC,iBAAiB,QAASX,KCFxD,MAAMY,EAAYL,SAASC,iBAAiB,sBACtBD,SAASM,cAAc,eAI7C,SAASC,EAAqBb,GAC5B,MAAMC,EAASD,EAAMG,cAErB,GAAuB,UAAnBF,EAAOC,SACT,OAGF,MAAMY,EAAoD,SAAzCb,EAAOc,aAAa,mBAA+B,EAEpEJ,EAAUH,SAAQC,GAAMA,EAAGO,aAAa,iBAAkBF,KAE1DR,SAASW,KAAKb,UAAUC,OAAO,mBAbjCM,EAAUH,SAAQC,GAAMA,EAAGC,iBAAiB,QAASG,KCHrD,MAAMK,EAAS,CACbC,cAAeb,SAASM,cAAc,iCACtCQ,gBAAiBd,SAASM,cAAc,uCAG1CM,EAAOE,gBAAgBV,iBAAiB,SAExC,SAAwBV,GACtB,MAAMqB,EAAcrB,EAAMC,OAC1B,GAC0B,UAAxBoB,EAAYnB,UACZmB,IAAgBH,EAAOC,cAEvB,OAGFD,EAAOC,cAAcG,QAAQC,SAAW,QACxCL,EAAOC,cAAgBE,EACvBH,EAAOC,cAAcG,QAAQC,SAAW,OACxCjB,SAASkB,gBAAgBC,MAAMC,YAC7B,0BACAR,EAAOC,cAAcG,QAAQK,SCRjC,MAAMC,EACI,CACNC,IAAK,EACLC,IAAK,IACLC,MAAO,IACPC,UAAW,EACXC,MAAO,GANLL,EAQQ,CACVC,IAAK,mBACLC,IAAK,mBACLC,MAAO,qBACPC,UAAW,yBACXC,MAAO,sBA4BX,MAAMC,UAlBN,MAOEC,OAAOC,GACLC,KAAKC,QAAQC,UAAYH,IAqD3BI,MACEC,aAAaJ,KAAKK,UAUpBC,QACMN,KAAKO,QAAUP,KAAKP,KACtBO,KAAKO,SAAWP,KAAKL,UACrBK,KAAKF,OAAOE,KAAKO,UACRP,KAAKO,QAAUP,KAAKP,MAC7BO,KAAKF,OAAOE,KAAKP,KACjBO,KAAKG,OAUTK,aACMR,KAAKJ,MAAQ,EACfa,YAAW,KACTT,KAAKK,SAAWK,YAAYV,KAAKM,MAAMK,KAAKX,MAAOA,KAAKN,SACvDM,KAAKJ,OAERI,KAAKK,SAAWK,YAAYV,KAAKM,MAAMK,KAAKX,MAAOA,KAAKN,OAE1DM,KAAKF,OAAOE,KAAKR,KAjEnBoB,YAAYC,EAAUrB,EAAKC,EAAKC,EAAOC,EAAWC,GAChDkB,QACAd,KAAKa,SAAWA,EAChBb,KAAKC,QAAUhC,SAASM,cAAcyB,KAAKa,UAC3Cb,KAAKR,IACHuB,SAASf,KAAKC,QAAQvB,aAAaa,EAAgBC,OACnDD,EAAYC,IACdQ,KAAKP,IACHsB,SAASf,KAAKC,QAAQvB,aAAaa,EAAgBE,OACnDF,EAAYE,IACdO,KAAKN,MACHqB,SAASf,KAAKC,QAAQvB,aAAaa,EAAgBG,SACnDH,EAAYG,MACdM,KAAKL,UACHoB,SAASf,KAAKC,QAAQvB,aAAaa,EAAgBI,aACnDJ,EAAYI,UACdK,KAAKJ,MACHmB,SAASf,KAAKC,QAAQvB,aAAaa,EAAgBK,SACnDL,EAAYK,MACdI,KAAKO,QAAUP,KAAKR,IACpBQ,KAAKK,SACLL,KAAKQ,cAiDO,IAAIX,EAAQ,6BACX,IAAIA,EAAQ","sources":["src/js/rolling_card.js","src/js/menu.js","src/js/reviews.js","src/js/numbers.js"],"sourcesContent":["const productCards = document.querySelectorAll('.product-cards__card');\n\nproductCards.forEach(el => el.addEventListener('click', rotateCards));\n\nfunction rotateCards(event) {\n  if (event.target.nodeName != 'BUTTON') {\n    return;\n  }\n\n  event.currentTarget.classList.toggle('is-flipped');\n}\n","const menuBttns = document.querySelectorAll('[data-menu-button]');\nconst mobileMenuRef = document.querySelector('[data-menu]');\n\nmenuBttns.forEach(el => el.addEventListener('click', toggleMenuVisibility));\n\nfunction toggleMenuVisibility(event) {\n  const target = event.currentTarget;\n\n  if (target.nodeName != 'BUTTON') {\n    return;\n  }\n\n  const expanded = target.getAttribute('aria-expanded') === 'true' || false;\n\n  menuBttns.forEach(el => el.setAttribute('aria-expanded', !expanded));\n\n  document.body.classList.toggle('js-is-menu-open');\n}\n","const domEls = {\n  currentButton: document.querySelector('button[data-is-active=\"true\"]'),\n  reviewsControls: document.querySelector('.section-reviews__reviews-controls'),\n};\n\ndomEls.reviewsControls.addEventListener('click', onChangeReview);\n\nfunction onChangeReview(event) {\n  const clickTarget = event.target;\n  if (\n    clickTarget.nodeName != 'BUTTON' ||\n    clickTarget === domEls.currentButton\n  ) {\n    return;\n  }\n\n  domEls.currentButton.dataset.isActive = 'false';\n  domEls.currentButton = clickTarget;\n  domEls.currentButton.dataset.isActive = 'true';\n  document.documentElement.style.setProperty(\n    '--current-review-number',\n    domEls.currentButton.dataset.indx\n  );\n}\n\n","/**\n *\n *  Counter Library.\n *\n * @author Louis Young\n *\n */\n\n/**\n * Data object to store configuration etc.\n *\n */\n\nconst data = {\n  config: {\n    min: 0,\n    max: 100,\n    speed: 100,\n    increment: 1,\n    delay: 0,\n  },\n  attributes: {\n    min: 'data-counter-min',\n    max: 'data-counter-max',\n    speed: 'data-counter-speed',\n    increment: 'data-counter-increment',\n    delay: 'data-counter-delay',\n  },\n};\n\n/**\n * Screen class.\n *\n * Update the element to display the value passed in to the function.\n */\n\nclass Screen {\n  /**\n   * Render function.\n   *\n   * @param value\n   */\n\n  render(value) {\n    this.element.innerHTML = value;\n  }\n}\n\n/**\n * Counter class.\n *\n * @extends Screen\n */\n\nclass Counter extends Screen {\n  /**\n   *\n   * Class constructor with these possible parameters;\n   *\n   * @param selector\n   * @param min\n   * @param max\n   * @param increment\n   * @param speed\n   * @param delay\n   */\n\n  constructor(selector, min, max, speed, increment, delay) {\n    super();\n    this.selector = selector;\n    this.element = document.querySelector(this.selector);\n    this.min =\n      parseInt(this.element.getAttribute(data.attributes.min)) ||\n      data.config.min;\n    this.max =\n      parseInt(this.element.getAttribute(data.attributes.max)) ||\n      data.config.max;\n    this.speed =\n      parseInt(this.element.getAttribute(data.attributes.speed)) ||\n      data.config.speed;\n    this.increment =\n      parseInt(this.element.getAttribute(data.attributes.increment)) ||\n      data.config.increment;\n    this.delay =\n      parseInt(this.element.getAttribute(data.attributes.delay)) ||\n      data.config.delay;\n    this.current = this.min;\n    this.interval;\n    this.initialize();\n  }\n\n  /**\n   * Die function.\n   *\n   * Clear the current interval.\n   */\n\n  die() {\n    clearTimeout(this.interval);\n    return;\n  }\n\n  /**\n   * Count function.\n   *\n   * Increment the counter.\n   */\n\n  count() {\n    if (this.current < this.max) {\n      this.current += this.increment;\n      this.render(this.current);\n    } else if (this.current > this.max) {\n      this.render(this.max);\n      this.die();\n    }\n  }\n\n  /**\n   * Initialize function.\n   *\n   * Start the counter incrementing and render the starting value.\n   */\n\n  initialize() {\n    if (this.delay > 0) {\n      setTimeout(() => {\n        this.interval = setInterval(this.count.bind(this), this.speed);\n      }, this.delay);\n    } else {\n      this.interval = setInterval(this.count.bind(this), this.speed);\n    }\n    this.render(this.min);\n  }\n}\n\n// Instantiate the Counter class...\nconst counter = new Counter('.header__numbers-text--16');\nconst counter2 = new Counter('.header__numbers-text--23');\n"],"names":["$8a0fa89e4d5b88ed$var$rotateCards","event","target","nodeName","currentTarget","classList","toggle","document","querySelectorAll","forEach","el","addEventListener","$312afa7e9128739a$var$menuBttns","querySelector","$312afa7e9128739a$var$toggleMenuVisibility","expanded","getAttribute","setAttribute","body","$7a61cd872e2df962$var$domEls","currentButton","reviewsControls","clickTarget","dataset","isActive","documentElement","style","setProperty","indx","$dd46cd1dd8498cc1$var$data","min","max","speed","increment","delay","$dd46cd1dd8498cc1$var$Counter","render","value","this","element","innerHTML","die","clearTimeout","interval","count","current","initialize","setTimeout","setInterval","bind","constructor","selector","super","parseInt"],"version":3,"file":"index.94dc2e2a.js.map"}